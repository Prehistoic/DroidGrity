#include "droidgrity.h"

int getCertDataFromJarSignature(int fd, off_t eocdOffset, size_t& certSize, unsigned char* certData) {
    // Get Central Directory offset
    off_t centralDirOffset = getCentralDirectoryOffset(fd, eocdOffset);

    // Find certificate file in META-INF
    char certFileName[256];
    off_t certFileOffset;
    if (findCertificateFile(fd, centralDirOffset, certFileName, certFileOffset, certSize) < 0) {
        LOGE("Failed to locate META-INF/*.RSA or *.DSA file");
        return -1;
    }

    // Extract and hash the certificate file
    if (extractCertFile(fd, certFileOffset, certSize, certData) < 0) {
        LOGE("Failed to extract certificate file");
        return -1;
    }

    return 0;
}

int getCertDataFromAPKSigningBlock(int fd, off_t eocdOffset, size_t& certSize, unsigned char* certData) {
    off_t blockOffset = locateAPKSigningBlock(fd, eocdOffset);
    if (blockOffset < 0) {
        LOGE("Failed to find APK Signing Block");
        return -1;
    }

    int success = parseAPKSigningBlock(fd, blockOffset, certSize, certData);

    if (success < 0) {
        LOGE("Failed to parse APK Signing Block");
    }

    return success;
}

int verifyCertificateFromAPK(const char* apkPath, unsigned char* knownCertHash, size_t hashLen) {
    int fd = my_openat(AT_FDCWD, apkPath, O_RDONLY);
    if (fd < 0) {
        LOGE("Failed to open APK %s", apkPath);
        return -1;
    }

    // Locate EOCD
    off_t eocdOffset = findEOCDOffset(fd);
    if (eocdOffset < 0) {
        LOGE("Failed to locate EOCD");
        my_close(fd);
        return -1;
    }

    size_t certSize = 0;
    unsigned char certData[BUFFER_SIZE];

    // First we try to look for APK Signing Block (v2+)
    int success = getCertDataFromAPKSigningBlock(fd, eocdOffset, certSize, certData);

    // If we didn't find any APK Signing Block, we look for JAR Signature (v1)
    if (success < 0) {
        LOGW("Failed to find the certificates with method for v2+ signature. Trying with method for v1 signature...");
        success = getCertDataFromJarSignature(fd, eocdOffset, certSize, certData);
    }

    if (success < 0) {
        LOGE("Failed to find the certificate(s) with both methods");
        my_close(fd);
        return -1;
    }

    // We're finished with reading the file we can close the file handler
    my_close(fd);

    LOGD("Cert raw data : %s", certData);

    // Hash the certificate file with our custom sha256 implementation
    unsigned char certHash[SHA256_BYTES_SIZE];
    sha256_bytes(certData, certSize, certHash);

    // Following lines are a helper I used to get my certificate sequence hash
    char* hexString = convertToHex(certHash, sizeof(certHash));
    LOGI("Found Certificate Hash = %s", hexString);
    free(hexString);

    // Compare with known hash
    if (my_memcmp(certHash, knownCertHash, hashLen) == 0) {
        LOGI("Certificate matches");
        return 0;
    } else {
        LOGE("Certificate does not match");
        return -1;
    }
}

extern "C"
JNIEXPORT void JNICALL
Java_@droidgrity.filler.appPackageName_withUnderscores@_DroidGrity_checkApkIntegrity(JNIEnv *env, jobject instance) {
    const char *apkPath = getApkPath("@droidgrity.filler.appPackageName_withDots@");

    if (apkPath == NULL) {
        LOGE("Could not find APK something may be fishy, crashing !");
        int *ptr = NULL;
        *ptr = 42;
    }

    LOGI("APK Path = %s", apkPath);

    // Known hash of the original signing certificate
    unsigned char knownCertHash[SHA256_BYTES_SIZE] = { @droidgrity.filler.knownCertHash@ };

    // Verify the certificate used to sign the APK
    if (verifyCertificateFromAPK(apkPath, knownCertHash, SHA256_BYTES_SIZE) < 0) {
        // APK was tampered with so we'll crash by referencing a null pointer !
        LOGE("APK was tampered with, crashing !");
        int *ptr = NULL;
        *ptr = 42;
    } else {
        LOGI("APK was not tampered with, continuing !");
    }
}